## Blocks and capturing

You can capture blocks of a template by wrapping them in a function
definition. For example, rendering this template:

    <%% div = (contents) => %>
       <div><%%- contents %></div>
    <%% end %>
    <%%= div "Hello" %>

would produce:

    <div>Hello</div>

Captured blocks can be passed to helper methods too. In this example,
the capture body is passed to the `formFor` helper as its last
argument. Then the `formFor` helper calls this argument to produce a
value.

    template = """
      <%%= @formFor @project, (form) => %>
        <label>Name:</label>
        <%%= form.textField "name" %>
      <%% end %>
    """

    eco.render template,
      project: { id: 1, name: "Mobile app" }
      formFor: (project, yield) ->
        form =
          textField: (attribute) =>
            name  = @escape attribute
            value = @escape @project[attribute]
            @safe "<input type='text' name='#{name}' value='#{value}'>"

        url  = "/projects/#{@project.id}"
        body = yield form
        @safe "<form action='#{url}' method='post'>#{body}</form>"

Note: In general, you should use CoffeeScript's fat arrow (`=>`) to
define capturing functions, so that you have access to the context
object inside the captured block. Treat the plain arrow (`->`) as an
optimization, for when you are certain the capture body will not need
to reference properties or helper methods on the context object.
